# -*- coding: utf-8 -*-
"""Heart_disease_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AL-kC08KI7tEDNQRcZiZMn4KdtIIZ_SR
"""

import numpy as np
import pandas as pd

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
# %matplotlib inline

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.model_selection import RandomizedSearchCV

heart_df = pd.read_csv('/content/heart.csv')
heart_df.head(20)

heart_df.shape

heart_df.info()

heart_df.isnull().sum()

heart_df.describe()

heart_df['target'].value_counts()

heart_df.columns

sns.set_style('whitegrid')

plt.figure(figsize=(8, 6))

features = ['trestbps', 'chol', 'thalach']

#Create subplots for each numerical column
for i, feature in enumerate(features, 1):
    plt.subplot(2, 3, i)
    sns.histplot(heart_df[feature], bins=30, kde=True)
    plt.title(f'Distribution of {feature}')
    plt.xlabel(feature)
    plt.ylabel('Frequency')

#Create boxplots to check for outliers
for i, feature in enumerate(features, i):
    plt.subplot(2,3, i+1)
    sns.boxplot(y=heart_df[feature])
    plt.title(f'Boxplot of {feature}')

plt.tight_layout()
plt.show()

heart_df['sex'].value_counts()

sns.set_style('whitegrid')

fig, axes = plt.subplots(2, 1, figsize=(8, 6))

# Make a copy of the dataframe heart_df so that I can map the value of 'sex' column to
# 'Male' and 'Female' for visualization process only
heart_df_copy = pd.DataFrame(heart_df).copy()

heart_df_copy['sex'] = heart_df_copy['sex'].map({1: 'Male', 0: 'Female'})

sns.barplot(x='target', y='age', hue='sex', data=heart_df_copy, palette='Set1', ax=axes[0])
axes[0].set_title('Distribution of Male and Female with Heart Disease (1) with respect to their Age')
axes[0].set_xlabel('No Heart Disease(0) & Heart Disease (1)')
axes[0].set_ylabel('Age')
axes[0].legend(title='Sex')

sns.scatterplot(x='target', y='age', hue='sex', data=heart_df_copy, palette='Set1', ax=axes[1])
axes[1].set_title('Distribution of Male and Female with Heart Disease (1) with respect to their Age')
axes[1].set_xlabel('No Heart Disease(0) & Heart Disease (1)')
axes[1].set_ylabel('Age')
axes[1].legend(title='Sex')

plt.subplots_adjust(top=1.5)


plt.show()

X = heart_df.drop(['target', 'age', 'sex'], axis=1)
y = heart_df.target

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=1)

print(X_train.shape)
print(X_test.shape)

print(y_train.shape)
print(y_test.shape)

dt_model = DecisionTreeClassifier()
dt_model.fit(X_train, y_train)

dt_X_train_pred = dt_model.predict(X_train)
dt_train_accuracy = accuracy_score(dt_X_train_pred, y_train)

print("Accuracy for Training set: ", dt_train_accuracy)

dt_X_test_pred = dt_model.predict(X_test)
dt_test_accuracy = accuracy_score(dt_X_test_pred, y_test)

print("Accuracy for Testing set: ", dt_test_accuracy)

y_pred = dt_model.predict(X)

report = classification_report(y_pred, y)
print(report)